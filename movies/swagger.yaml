
openapi: 3.0.0

paths:
  /movies/{movie_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getMovie/invocations"
        httpMethod: "POST"
    put:
      summary: Saves movie info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sk: 
                  type: string
                title:
                  type: string
                actors:
                  type: array
                  items: 
                    type: string
                year:
                  type: string
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putMovie/invocations"
        httpMethod: "POST"

  /cinema-rooms/{cinema_id}:
    get:
      summary: Returns cinema info
      parameters:
        - name: cinema_id
          in: path
          required: true
          description: cinema unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:getCinema/invocations"
        httpMethod: "POST"
    put:
      summary: Saves cinema info
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sk: 
                  type: string
                schedule:
                  type: array
                  items: 
                    type: string
                3D:
                  type: string
                people-attend:
                  type: array
                  items: 
                    type: string
      parameters:
        - name: cinema_id
          in: path
          required: true
          description: cinema unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:putCinema/invocations"
        httpMethod: "POST"



  /roomsPerDay/movie/{movie_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
        - name: date
          in: query
          schema:
            type: string
          description: date of movie
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:roomsPerDay/invocations"
        httpMethod: "POST"
  
  /peopleAttend/movie/{movie_id}/cinema-rooms/{room_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: movie_id
          in: path
          required: true
          description: movie unique id
        - name: room_id
          in: path
          required: true
          description: room unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:peopleAttend/invocations"
        httpMethod: "POST"
  
  /seatsAvailable/cinema/{cinema_id}:
    get:
      summary: Returns movie info
      parameters:
        - name: cinema_id
          in: path
          required: true
          description: cinema unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:seatsAvailable/invocations"
        httpMethod: "POST"
  
  /customerWatched/customers/{customer_id}:
    get:
      summary: Returns all movies this person has watched
      parameters:
        - name: customer_id
          in: path
          required: true
          description: custumer unique id
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:customerWatched/invocations"
        httpMethod: "POST"

  